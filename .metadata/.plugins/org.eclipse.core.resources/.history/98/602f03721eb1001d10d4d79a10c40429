package es.tributasenasturias.servicios.seguridadws;

import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.Holder;
import javax.xml.ws.WebServiceException;

import org.apache.ws.security.WSSecurityException;

import es.tributasenasturias.servicios.seguridadws.implementacion.FirmaException;
import es.tributasenasturias.servicios.seguridadws.implementacion.FirmanteMensaje;
import es.tributasenasturias.servicios.seguridadws.implementacion.ValidacionConstants;
import es.tributasenasturias.servicios.seguridadws.implementacion.ValidadorException;
import es.tributasenasturias.servicios.seguridadws.implementacion.ValidadorFirma;

/**
 * This class was generated by the JAX-WS RI. Oracle JAX-WS 2.1.3-06/19/2008
 * 07:03 PM(bt) Generated source version: 2.1
 * 
 */
@WebService(portName = "SeguridadSOAP", serviceName = "Seguridad", targetNamespace = "http://www.tributasenasturias.es/SeguridadWS/", wsdlLocation = "/wsdls/Seguridad.wsdl", endpointInterface = "es.tributasenasturias.servicios.seguridadws.Seguridad")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
public class Seguridad_SeguridadSOAPImpl implements Seguridad {

	public Seguridad_SeguridadSOAPImpl() {
	}

	/**
	 *  Valida la firma según WS-Security, comprobando no sólo la criptografía, sino
	 *  que el certificado que ha firmado está emitido por un CA válido.
	 * @param soapMsg Mensaje SOAP a validar 
	 * @param esError Indica si la respuesta se considera error.
	 * @param codigo Código de respuesta
	 * @param mensaje Texto de respuesta
	 */
	public void validacionFirmaCompleta(String soapMsg,
			Holder<Boolean> esError, Holder<String> codigo, Holder<String> mensaje) {
		try {
			ValidadorFirma validador= new ValidadorFirma();
			validador.validarFirma(soapMsg, ValidacionConstants.VALIDACION_COMPLETA);
			esError.value=false;
			codigo.value="0000";
			mensaje.value="Mensaje validado correctamente";
		} catch (ValidadorException e) {
			esError.value=true;
			codigo.value="Error en la validación de seguridad.";
			mensaje.value=e.getMessage();
		} catch (WSSecurityException e) {
			esError.value=true;
			codigo.value="Seguridad no válida.";
			mensaje.value=e.getMessage();
		}
		
		return;
	}

	/**
	 *  Valida la firma según WS-Security. Sólo valida la criptografía, no que 
	 *   el certificado ha sido emitido por una CA válida. 
	  * @param soapMsg Mensaje SOAP a validar 
	 * @param esError Indica si la respuesta se considera error.
	 * @param codigo Código de respuesta
	 * @param mensaje Texto de respuesta
	 */
	public void validacionFirmaSinCertificado(String soapMsg,
			Holder<Boolean> esError, Holder<String> codigo, Holder<String> error) {
		try {
			ValidadorFirma validador= new ValidadorFirma();
			validador.validarFirma(soapMsg, ValidacionConstants.VALIDACION_SIN_CERTIFICADO);
			esError.value=false;
			codigo.value="0000";
			error.value="Mensaje validado correctamente";
		} catch (ValidadorException e) {
			esError.value=true;
			codigo.value="Error en la validación de seguridad.";
			error.value=e.getMessage();
		} catch (WSSecurityException e) {
			esError.value=true;
			codigo.value="Seguridad no válida.";
			error.value=e.getMessage();
		}
	}

    /**
     * Firma un mensaje según un certificado indicado.
     * @param mensaje Mensaje a firmar
     * @param aliasCertificado Alias de certificado según se ha indicado en la configuración de firma digital.
     * @return
     *     returns java.lang.String
     */
    public String firmarMensaje(String mensaje, String aliasCertificado) {
        FirmanteMensaje firma=null;
        try {
        	firma=new FirmanteMensaje();
			return firma.firmaMensaje(mensaje, aliasCertificado);
		} catch (WSSecurityException e) {
			throw new WebServiceException("Error en la firma:" + e.getMessage());
		} catch (FirmaException e) {
			throw new WebServiceException ("Error en la firma:" + e.getMessage());
		}
    }

	/**
	 * 
	 * @param aliasCertificado
	 * @param intervaloSegundosExpiracion
	 * @param mensaje
	 * @return returns java.lang.String
	 */
	public String firmarMensajeConTimestamp(String mensaje,
			String aliasCertificado, int intervaloSegundosExpiracion) {
		FirmanteMensaje firma=null;
        try {
        	firma=new FirmanteMensaje();
			return firma.firmaMensajeTimestamp(mensaje, aliasCertificado, intervaloSegundosExpiracion);
		} catch (WSSecurityException e) {
			throw new WebServiceException("Error en la firma:" + e.getMessage());
		} catch (FirmaException e) {
			throw new WebServiceException ("Error en la firma:" + e.getMessage());
		}
	}

	//CRUBENCVS 47084
	//Posteriormente esta implementación deberá ser la que de servicio a firmarMensaje,
	//pero en esta primera versión no lo cambio para no propagar posibles errores
	//a lo que ya está funcionando.
	/**
     * Firma un mensaje según un certificado e indicando el algoritmo
     * @param mensaje Mensaje a firmar
     * @param aliasCertificado Alias de certificado según se ha indicado en la configuración de firma digital.
     * @param uriAlgoritmoFirma Uri del algoritmo de firma según "https://www.w3.org/TR/2013/REC-xmldsig-core1-20130411/". <p>No tienen por qué soportarse todos en la implementación actual</p>
     * @param uriAlgoritmoDigest Uri del método de Digest según "https://www.w3.org/TR/2013/REC-xmldsig-core1-20130411/". <p>No tienen por qué soportarse todos en la implementación actual</p>
     * @return
     *     returns java.lang.String
     */
    public String firmarMensaje(String mensaje, String aliasCertificado, String uriAlgoritmoFirma, String uriAlgoritmoDigest) {
        FirmanteMensaje firma=null;
        try {
        	firma=new FirmanteMensaje();
			return firma.firmaMensajeAlgoritmo(mensaje, aliasCertificado, uriAlgoritmoFirma, uriAlgoritmoDigest);
		} catch (WSSecurityException e) {
			throw new WebServiceException("Error en la firma:" + e.getMessage());
		} catch (FirmaException e) {
			throw new WebServiceException ("Error en la firma:" + e.getMessage());
		}
    }

}
